global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and y != '0'
endglobal



#general helpers
snippet beg "begin{} / end{}" b
\\begin{$1}
    $0
\\end{$1}
endsnippet

snippet enum "enumerate" b
\\begin{enumerate}
    \\item $0
\\end{enumerate}
endsnippet

snippet itemize "itemize" b
\\begin{itemize}
    \\item $0
\\end{itemize}
endsnippet

snippet it "new item" w
\\item$0
endsnippet

snippet frame "mdframed" b
\\begin{mdframed}
    $0
\\end{mdframed}
endsnippet

#math specific
snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
\\begin{displaymath}
$1
\\end{displaymath}
$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet compl "complement" iA
^{\\complement}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

#fractions


context "math()"
priority 10
snippet "bar" "bar" riA
\\overline{$1}{$0}
endsnippet

context "math()"
priority 100
snippet "([a-zA-z])bar" "bar" riA
\\overline{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\\vec{`!p snip.rv=match.group(1)`}
endsnippet

#code inlining
snippet asm "Assembly"
\\begin{lstlisting}[language={[x86asm]Assembler}]
$0
\\end{lstlisting}
endsnippet

snippet ccode "C code"
\\begin{lstlisting}[language=C]
$0
\\end{lstlisting}
endsnippet
